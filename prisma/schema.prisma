// ============================================
// ERP ARTISAN - PRISMA SCHEMA (MULTI-TENANT)
// ============================================

generator client {
  provider = "prisma-client"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// MULTI-TENANCY
// ============================================

model Entreprise {
  id    String @id @default(cuid())
  nom   String
  siret String? @unique
  email String  @unique

  // Gestion d'abonnement
  plan            PlanAbonnement @default(FREE)
  abonnementActif Boolean        @default(true)
  dateAbonnement  DateTime       @default(now())
  dateExpiration  DateTime?

  // Relations (toutes les données de l'entreprise)
  users             User[]
  categories        Categorie[]
  articles          Article[]
  clients           Client[]
  documents         Document[]
  mouvements        MouvementStock[]
  parametres        ParametresEntreprise?
  niveauxFidelite   NiveauFidelite[]
  mouvementsPoints  MouvementPoints[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([siret])
  @@index([abonnementActif])
}

enum PlanAbonnement {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

// ============================================
// AUTHENTIFICATION
// ============================================

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  name     String?
  role     String @default("user")

  // Multi-tenant: chaque user appartient à une entreprise
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  entrepriseId String

  // Onboarding: tracking si l'utilisateur a complété son profil
  onboardingComplete Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entrepriseId])
  @@index([email])
}

// ============================================
// CLIENTS
// ============================================

model Client {
  id         String  @id @default(cuid())
  nom        String
  prenom     String?
  email      String?
  telephone  String?
  adresse    String?
  codePostal String?
  ville      String?
  pays       String  @default("France")
  notes      String?

  // Programme de fidélité
  points_solde      Int     @default(0)
  niveauFidelite    NiveauFidelite? @relation(fields: [niveauFideliteId], references: [id])
  niveauFideliteId  String?

  // Multi-tenant
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  entrepriseId String

  documents        Document[]
  mouvementsPoints MouvementPoints[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entrepriseId])
  @@index([nom])
  @@index([email])
  @@index([ville])
  @@index([niveauFideliteId])
  @@index([points_solde])
}

// ============================================
// CATALOGUE
// ============================================

model Categorie {
  id          String  @id @default(cuid())
  nom         String
  description String?
  ordre       Int     @default(0)
  parentId    String?

  // Multi-tenant
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  entrepriseId String

  parent       Categorie?           @relation("CategoriesToParent", fields: [parentId], references: [id])
  enfants      Categorie[]          @relation("CategoriesToParent")
  articles     Article[]
  champsCustom ChampPersonnalise[]

  createdAt DateTime @default(now())

  @@index([entrepriseId])
  @@index([nom])
  @@index([ordre])
}

model ChampPersonnalise {
  id          String          @id @default(cuid())
  categorieId String
  nom         String
  code        String
  type        TypeChampCustom @default(TEXT)
  ordre       Int             @default(0)
  obligatoire Boolean         @default(false)
  placeholder String?
  description String?
  options     Json?
  validation  Json?

  categorie Categorie @relation(fields: [categorieId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([categorieId, code])
  @@index([categorieId])
  @@index([ordre])
}

enum TypeChampCustom {
  TEXT
  TEXTAREA
  NUMBER
  DECIMAL
  SELECT
  MULTISELECT
  CHECKBOX
  DATE
  COLOR
  URL
  EMAIL
}

model Article {
  id            String      @id @default(cuid())
  reference     String
  nom           String
  description   String?
  type          ArticleType @default(PRODUIT)
  prix_ht       Decimal     @db.Decimal(10, 2)
  tva_taux      Decimal     @default(20.00) @db.Decimal(5, 2)
  unite         String      @default("unité")
  stock_actuel  Int         @default(0)
  stock_min     Int         @default(0)
  gestion_stock Boolean     @default(false)
  actif         Boolean     @default(true)
  champsCustom  Json?

  // Multi-tenant
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  entrepriseId String

  categorie   Categorie?       @relation(fields: [categorieId], references: [id])
  categorieId String?
  lignes      LigneDocument[]
  mouvements  MouvementStock[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([entrepriseId, reference])
  @@index([entrepriseId])
  @@index([reference])
  @@index([nom])
  @@index([type])
  @@index([categorieId])
  @@index([actif])
}

enum ArticleType {
  PRODUIT
  SERVICE
}

// ============================================
// TRANSACTIONS
// ============================================

model Document {
  id           String         @id @default(cuid())
  numero       String
  type         DocumentType
  dateEmission DateTime       @db.Date
  dateEcheance DateTime?      @db.Date
  statut       DocumentStatut @default(BROUILLON)

  // Multi-tenant
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  entrepriseId String

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  total_ht  Decimal @default(0) @db.Decimal(10, 2)
  total_tva Decimal @default(0) @db.Decimal(10, 2)
  total_ttc Decimal @default(0) @db.Decimal(10, 2)

  acompte_montant Decimal @default(0) @db.Decimal(10, 2)
  reste_a_payer   Decimal @default(0) @db.Decimal(10, 2)

  notes               String?
  conditions_paiement String?
  validite_jours      Int     @default(30)

  devisId  String?
  devis    Document?  @relation("DevisToFacture", fields: [devisId], references: [id])
  factures Document[] @relation("DevisToFacture")

  lignes    LigneDocument[]
  paiements Paiement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([entrepriseId, numero])
  @@index([entrepriseId])
  @@index([numero])
  @@index([type])
  @@index([clientId])
  @@index([statut])
  @@index([dateEmission])
  @@index([dateEcheance])
}

enum DocumentType {
  DEVIS
  FACTURE
  AVOIR
}

enum DocumentStatut {
  BROUILLON
  ENVOYE
  ACCEPTE
  REFUSE
  PAYE
  ANNULE
}

model LigneDocument {
  id         String   @id @default(cuid())
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  documentId String
  article    Article? @relation(fields: [articleId], references: [id])
  articleId  String?

  ordre            Int
  designation      String
  description      String?
  quantite         Decimal @db.Decimal(10, 2)
  prix_unitaire_ht Decimal @db.Decimal(10, 2)
  tva_taux         Decimal @db.Decimal(5, 2)
  remise_pourcent  Decimal @default(0) @db.Decimal(5, 2)

  montant_ht  Decimal @db.Decimal(10, 2)
  montant_tva Decimal @db.Decimal(10, 2)
  montant_ttc Decimal @db.Decimal(10, 2)

  createdAt DateTime @default(now())

  @@index([documentId])
  @@index([articleId])
  @@index([ordre])
}

model Paiement {
  id             String        @id @default(cuid())
  document       Document      @relation(fields: [documentId], references: [id], onDelete: Restrict)
  documentId     String
  date_paiement  DateTime      @db.Date
  montant        Decimal       @db.Decimal(10, 2)
  moyen_paiement MoyenPaiement
  reference      String?
  notes          String?

  createdAt DateTime @default(now())

  @@index([documentId])
  @@index([date_paiement])
  @@index([moyen_paiement])
}

enum MoyenPaiement {
  ESPECES
  CHEQUE
  VIREMENT
  CARTE
  PRELEVEMENT
}

// ============================================
// GESTION DES STOCKS
// ============================================

model MouvementStock {
  id          String        @id @default(cuid())
  type        TypeMouvement
  quantite    Int
  stock_avant Int
  stock_apres Int
  motif       String?
  reference   String?
  notes       String?

  // Multi-tenant
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  entrepriseId String

  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String

  createdAt DateTime @default(now())
  createdBy String?

  @@index([entrepriseId])
  @@index([articleId])
  @@index([type])
  @@index([createdAt])
}

enum TypeMouvement {
  ENTREE
  SORTIE
  AJUSTEMENT
  INVENTAIRE
  RETOUR
}

// ============================================
// PARAMÈTRES ENTREPRISE
// ============================================

model ParametresEntreprise {
  id             String  @id @default(cuid())
  nom_entreprise String
  siret          String?
  tva_intra      String?
  adresse        String?
  code_postal    String?
  ville          String?
  telephone      String?
  email          String?
  site_web       String?
  logo_url       String?

  prefixe_devis           String @default("DEV")
  prefixe_facture         String @default("FACT")
  prochain_numero_devis   Int    @default(1)
  prochain_numero_facture Int    @default(1)

  conditions_paiement_defaut String?
  mentions_legales           String?

  // Multi-tenant: relation one-to-one
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  entrepriseId String     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([entrepriseId])
}

// ============================================
// PROGRAMME DE FIDÉLITÉ
// ============================================

model NiveauFidelite {
  id          String  @id @default(cuid())
  nom         String
  description String?
  ordre       Int     @default(0)
  seuilPoints Int
  remise      Decimal @default(0) @db.Decimal(5, 2)
  couleur     String  @default("#000000")
  icone       String?
  avantages   String?
  actif       Boolean @default(true)

  // Multi-tenant
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  entrepriseId String

  clients Client[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([entrepriseId, nom])
  @@unique([entrepriseId, ordre])
  @@index([entrepriseId])
  @@index([ordre])
  @@index([seuilPoints])
  @@index([actif])
}

model MouvementPoints {
  id          String              @id @default(cuid())
  type        TypeMouvementPoints
  points      Int
  description String?
  reference   String?
  dateExpiration DateTime?       @db.Date

  // Multi-tenant
  entreprise   Entreprise @relation(fields: [entrepriseId], references: [id], onDelete: Cascade)
  entrepriseId String

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String

  createdAt DateTime @default(now())

  @@index([entrepriseId])
  @@index([clientId])
  @@index([type])
  @@index([createdAt])
  @@index([dateExpiration])
}

enum TypeMouvementPoints {
  GAIN
  DEPENSE
  EXPIRATION
  AJUSTEMENT
}
